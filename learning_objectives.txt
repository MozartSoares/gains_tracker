# WDD 330 Personal Project Learning Objectives

## JavaScript (25%)

### Description 1: Robust programming logic with workout management
**Where it can be seen:** The workout management functionality in `scripts/workouts.js` demonstrates robust JavaScript implementation with functions like `renderWorkouts()`, `filterWorkouts()`, and `handleWorkoutSubmit()` that validate data, handle user interactions, and update the UI dynamically.

### Description 2: Event-driven architecture for user interactions
**Where it can be seen:** `scripts/workouts.js` and `scripts/exercises.js` implement comprehensive event listeners in `setupEventListeners()` functions, which manage form submissions, filtering, and modal interactions.

### Description 3: Dynamic UI updates based on data state
**Where it can be seen:** The application shows empty states, loading states, and populated data views depending on the current state, as seen in the `renderWorkouts()` and `showEmptyState()` functions in `scripts/workouts.js`.

## Third-party APIs (15%)

### Description 1: Weather API integration for workout recommendations
**Where it can be seen:** The application integrates with Open-Meteo API as shown in `scripts/api.js` function `getWeatherData()` to fetch current weather conditions for workout recommendations.

### Description 2: Geolocation API for personalized weather data
**Where it can be seen:** The application uses the browser's Geolocation API through the `getUserLocation()` function in `scripts/api.js` to get the user's coordinates for localized weather data.

### Description 3: Custom backend API for data persistence
**Where it can be seen:** The application communicates with a custom REST API for exercise and workout data through functions like `getExercises()`, `createWorkout()`, and `updateWorkout()` in `scripts/api.js`.

## JSON (15%)

### Description 1: Processing API responses to display workout data
**Where it can be seen:** JSON data processing happens throughout the application, particularly in `scripts/api.js` where responses are parsed and transformed into application objects using `new Exercise(exercise)` and `new Workout(workout)`.

### Description 2: Transforming form data into JSON for API requests
**Where it can be seen:** In `scripts/workouts.js`, the `handleWorkoutSubmit()` function collects form data and transforms it into JSON structure before sending it to the API.

### Description 3: Storing user preferences in structured JSON format
**Where it can be seen:** User authentication data is stored in localStorage as JSON with functions like `localStorage.setItem('user', JSON.stringify(user))` in `scripts/api.js`.

## CSS (15%)

### Description 1: Responsive design with CSS variables and media queries
**Where it can be seen:** The `styles/main.css` file uses CSS custom properties (variables) for consistent theming and includes media queries for responsive layouts across different device sizes.

### Description 2: Transitions and animations for enhanced user experience
**Where it can be seen:** The `scripts/animations.js` file adds various animations including scroll effects, hover transformations, and typing animations with smooth transitions.

### Description 3: Custom styling for interactive elements
**Where it can be seen:** The application uses CSS transitions for buttons, cards, and interactive elements with styles like `transform: scale(1.2)` and `transition: transform 0.3s ease` in the hover effects implemented in `scripts/animations.js`.

## Events (15%)

### Description 1: Form submission handling with validation
**Where it can be seen:** Event listeners for form submissions with validation are implemented in functions like `handleWorkoutSubmit()` in `scripts/workouts.js`.

### Description 2: Interactive UI elements with custom event handling
**Where it can be seen:** The application uses event delegation for table rows with action buttons in `renderWorkouts()` function of `scripts/workouts.js`, attaching events to dynamically created elements.

### Description 3: Scroll-based animations and effects
**Where it can be seen:** The `initScrollAnimations()` function in `scripts/animations.js` detects when elements enter the viewport and triggers animations accordingly.

## Local Storage (5%)

### Description 1: User authentication state persistence
**Where it can be seen:** The application stores authentication tokens and user data in localStorage for persistent sessions, as implemented in `loginUser()` and `logoutUser()` functions in `scripts/api.js`.

### Description 2: User preferences and settings storage
**Where it can be seen:** User preferences for workouts and exercises are stored locally to remember settings between sessions.

### Description 3: Caching frequently used data
**Where it can be seen:** The application utilizes localStorage to cache API responses for improved performance and offline functionality when appropriate. 